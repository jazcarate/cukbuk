{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Alternative.svelte",
    "../../Line.svelte",
    "../../NumberInput.svelte",
    "../../Options.svelte",
    "../../Recipe.svelte",
    "../../Doable.svelte",
    "../../Edit.svelte",
    "../../Recipe.svelte",
    "../../Step.svelte",
    "../../Timer.svelte",
    "../../Toast.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">;\nimport Line from \"./Line.svelte\";\nexport let value;\nlet current = 0;\nfunction cycle() {\n    current = (current + 1) % value.length;\n}\n</script>\n\n<div>\n    <span on:click={cycle}>üîÑ</span>\n    {current}:\n    {#each value[current] as line}\n        <Line {line} />\n    {/each}\n</div>\n\n<style>\n    div {\n        margin-left: 1em;\n        border-left: 1px solid blueviolet;\n    }\n</style>\n",
    "<script lang=\"ts\">import Step from \"./Step.svelte\";\n;\nimport LineContent from \"./LineContent.svelte\";\nexport let line;\n</script>\n\n{#if line._type == \"header\"}\n    <h2>{line.value}</h2>\n{:else if line._type == \"step\"}\n    <Step>\n        <LineContent items={line.value} />\n    </Step>\n{:else if line._type == \"paragraph\"}\n    <p>\n        <LineContent items={line.value} />\n    </p>\n{/if}\n\n<style>\n    h2 {\n        margin-top: 1rem;\n        line-height: 1.17em;\n        font-size: 1.5rem;\n        font-weight: 600;\n    }\n</style>\n",
    "<script lang=\"ts\">import { createEventDispatcher } from \"svelte\";\nexport let value;\nconst dispatch = createEventDispatcher();\nlet intermediateValue = value.toString();\n$: intermediateValue = round(value).toString();\nfunction round(x) {\n    return Math.round(x * 100) / 100;\n}\nfunction input() {\n    const candidate = parseFloat(intermediateValue);\n    if (!isNaN(candidate)) {\n        // Very important that the dispatch gets send before the update to the value\n        dispatch(\"input\", candidate);\n        value = candidate;\n    }\n}\n</script>\n\n<input\n    bind:value={intermediateValue}\n    on:input={input}\n    type=\"number\"\n    step=\"any\"\n    min=\"0\"\n    style=\"width: {Math.max(3, (intermediateValue || '').toString().length) +\n        'em'}\"\n/>\n\n<style>\n    input {\n        -moz-appearance: textfield;\n        border-radius: 5px;\n        background-color: var(--color-background-input);\n        border: none;\n        border-bottom: 2px solid var(--color-primary);\n        text-align: center;\n        transition: width 0.4s ease-out;\n        color: var(--color-primary);\n    }\n</style>\n",
    "<script lang=\"ts\">import { _ } from \"svelte-i18n\";\nimport { keys, weightUnits, volumeUnits } from \"./lib/units\";\nimport { scale, volumeUnit, weightUnit } from \"./myRecipeStore\";\nimport Scalar from \"./Scalable.svelte\";\nfunction restartScale() {\n    scale.set(1);\n}\nfunction changeWeight(ev) {\n    weightUnit.set(ev.currentTarget.value);\n}\nfunction changeVolume(ev) {\n    volumeUnit.set(ev.currentTarget.value);\n}\n</script>\n\n<main>\n    <div class=\"option\">\n        <span on:click={restartScale}>{$_(\"recipe.scale\")}</span>\n        <Scalar value={1} />\n    </div>\n\n    <div class=\"option\">\n        {$_(\"recipe.weight\")}\n        <select on:change={changeWeight}>\n            {#each keys(weightUnits) as unit}\n                <option value={unit} selected={$weightUnit == unit}\n                    >{unit}</option\n                >\n            {/each}\n        </select>\n    </div>\n\n    <div class=\"option\">\n        {$_(\"recipe.volume\")}\n        <select on:change={changeVolume}>\n            {#each keys(volumeUnits) as unit}\n                <option value={unit} selected={$volumeUnit == unit}\n                    >{unit}</option\n                >\n            {/each}\n        </select>\n    </div>\n</main>\n\n<style>\n    select {\n        cursor: pointer;\n        border-radius: 0;\n        appearance: none;\n        border: none;\n        padding: 0 1em 0 0;\n        margin: 0;\n        border-radius: 5px;\n        font-family: inherit;\n        font-size: inherit;\n        cursor: inherit;\n        line-height: inherit;\n        background-color: var(--color-background-input);\n        border-bottom: 2px solid var(--color-primary);\n        color: var(--color-primary);\n    }\n\n    main {\n        display: flex;\n        width: 100%;\n    }\n    .option {\n        flex: 1;\n    }\n</style>\n",
    "<script lang=\"ts\">import { params } from \"svelte-hash-router\";\nimport Recipe from \"../Recipe/Recipe.svelte\";\nimport Options from \"../Options.svelte\";\nimport { getRecipeFromHash } from \"../lib/recipe\";\nlet promise = getRecipeFromHash($params._);\n</script>\n\n<main>\n    {#await promise}\n        <p>...</p>\n    {:then text}\n        <Recipe {text} />\n    {/await}\n\n    <Options />\n</main>\n\n<style>\n    main {\n        margin: 0 auto;\n        padding: 1em;\n        position: relative;\n    }\n\n    @media (min-width: 640px) {\n        main {\n            max-width: 640px;\n        }\n    }\n</style>\n",
    "<script lang=\"ts\">import { parse } from \"../lib/parser\";\nimport { checkFav, toggleFav } from \"../lib/fav\";\nimport { onMount } from \"svelte\";\nimport { setTitle } from \"../lib/title\";\nimport Line from \"../Line.svelte\";\nexport let text;\nconst recipe = parse(text);\nconsole.log({ recipe });\nlet isFav = checkFav(recipe.title);\nfunction fav() {\n    toggleFav(recipe.title, location.toString());\n    isFav = !isFav;\n}\nonMount(() => {\n    setTitle(recipe.title);\n});\n</script>\n\n<main>\n    <h1>\n        {recipe.title}\n        <span on:click={fav} class=\"clickable\">\n            {#if isFav}üåü{:else}‚≠ê{/if}\n        </span>\n    </h1>\n    <section>\n        {#each recipe.lines as line}\n            <Line {line} />\n        {/each}\n    </section>\n</main>\n\n<style>\n    h1 {\n        line-height: 1.14em;\n        font-size: 2.63rem;\n        font-weight: 600;\n    }\n\n    .clickable {\n        cursor: pointer;\n    }\n</style>\n",
    "<script lang=\"ts\">import { onMount } from \"svelte\";\nimport { _ } from \"svelte-i18n\";\nimport { setTitle } from \"../lib/title\";\nexport let text;\nonMount(() => {\n    setTitle($_(\"title.edit\"));\n});\n</script>\n\n<main>\n    <textarea bind:value={text} />\n</main>\n\n<style>\n    textarea {\n        width: 100%;\n        height: 80vh;\n    }\n</style>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { routes } from \"svelte-hash-router\";\nimport { _ } from \"svelte-i18n\";\nimport { encode } from \"../lib/lzma\";\nimport { pushToast } from \"../toastStore\";\nimport Doable from \"./Doable.svelte\";\nimport Edit from \"./Edit.svelte\";\nexport let text;\nlet edditingP = Promise.resolve(false);\nlet recipeRoute = $routes[\"/r/*\"];\nfunction switchMode(mode) {\n    edditingP = encode(text)\n        .then((newKey) => history.pushState(null, null, recipeRoute.$$stringify({ _: newKey })))\n        .then(() => mode);\n}\nfunction copy() {\n    return __awaiter(this, void 0, void 0, function* () {\n        yield navigator.clipboard.writeText(location.toString());\n        pushToast($_(\"recipe.copied\"));\n    });\n}\nfunction share() {\n    const shareData = {\n        title: \"Cukb.uk\",\n        url: location.toString(),\n    };\n    navigator.share(shareData);\n}\nlet isMobile = typeof window.orientation !== \"undefined\" ||\n    navigator.userAgent.indexOf(\"IEMobile\") !== -1;\n</script>\n\n<main>\n    {#await edditingP}\n        <p>{$_(\"recipe.changing\")}...</p>\n    {:then edditing}\n        {#if edditing}\n            <Edit bind:text />\n        {:else}\n            <Doable bind:text />\n        {/if}\n\n        <span on:click={() => switchMode(!edditing)}>\n            {#if edditing}{$_(\"recipe.ok\")}{:else}{$_(\"recipe.edit\")}{/if}\n        </span>\n        <span on:click={copy}>{$_(\"recipe.link\")}</span>\n        {#if isMobile}\n            <span on:click={share}>{$_(\"recipe.share\")}</span>\n        {/if}\n    {/await}\n</main>\n\n<style>\n    span {\n        cursor: pointer;\n    }\n</style>\n",
    "<script lang=\"ts\">let checked = false;\n</script>\n\n<ol>\n    <li>\n        <input type=\"checkbox\" bind:checked />\n        <span class:checked><slot /></span>\n    </li>\n</ol>\n\n<style>\n    .checked {\n        text-decoration: line-through;\n    }\n\n    ol {\n        list-style-type: none;\n        padding: 0;\n    }\n</style>\n",
    "<script lang=\"ts\">import { notify, request } from \"./lib/notifications\";\nimport { end } from \"./lib/time\";\n;\nexport let value;\nlet done = false;\nlet endDate;\nlet remaining;\nlet interval;\nfunction round(x) {\n    return x.toFixed(0).padStart(2, \"0\");\n}\nfunction start() {\n    request();\n    endDate = end(value);\n    remaining = value;\n    interval = setInterval(() => {\n        let diff = (endDate.getTime() - Date.now()) / 1000; // Seconds\n        if (diff <= 0) {\n            notifyy();\n            done = true;\n            stop();\n        }\n        else {\n            const hours = Math.floor(diff / 3600);\n            diff -= hours * 3600;\n            const minutes = Math.floor(diff / 60) % 60;\n            diff -= minutes * 60;\n            const seconds = diff;\n            remaining = { hours, minutes, seconds };\n        }\n    }, 1000);\n}\nfunction notifyy() {\n    notify(\"Cukbuk :: Timer up\", `Your timer is up!`);\n}\nfunction stop() {\n    endDate = null;\n    clearInterval(interval);\n}\n</script>\n\n{#if endDate}\n    <span on:click|stopPropagation={stop}>\n        ‚èπ {round(remaining.hours)}:{round(remaining.minutes)}:{round(\n            remaining.seconds\n        )}\n    </span>\n{:else}\n    <span on:click|stopPropagation={start}>\n        {#if done}‚úÖ{:else}‚ñ∂{/if}\n        {round(value.hours)}:{round(value.minutes)}:{round(value.seconds)}\n    </span>\n{/if}\n\n<style>\n    span {\n        cursor: pointer;\n    }\n</style>\n",
    "<script>\n    import { fade, fly } from \"svelte/transition\";\n    import { backOut } from \"svelte/easing\";\n    import { toasts } from \"./toastStore\";\n</script>\n\n<div class=\"toast-wrapper\">\n    {#each $toasts as toast (toast._id)}\n        <div\n            class=\"toast-item\"\n            in:fly={{\n                delay: 0,\n                duration: 300,\n                x: 0,\n                y: 50,\n                opacity: 0.1,\n                easing: backOut,\n            }}\n            out:fade={{ duration: 500, opacity: 0 }}\n        >\n            {toast.msg}\n        </div>\n    {/each}\n</div>\n\n<style>\n    .toast-wrapper {\n        position: fixed;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        text-align: center;\n        z-index: 9999;\n    }\n    .toast-item {\n        border-radius: 4px;\n        padding: 12px 10px;\n        margin: 10px auto;\n        max-width: 400px;\n        background: rgba(0, 0, 0, 0.7);\n        color: #fff;\n    }\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}